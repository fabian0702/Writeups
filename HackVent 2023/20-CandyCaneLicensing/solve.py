from random import choice
import requests


class CandyCaneBlock:
    Expiration = 0  # 4
    Generation = 0  # 4
    Product = 0     # 1
    Flags = 0       # 1
    Count = 0     # 2
    Random = 0    # 2
    Type = 0        # 1
    Shuffle = 0     # 1

candyMap = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 255, 255, 255, 255, 255, 255, 255, 8, 9, 10, 11, 12, 13, 14, 15, 255, 16, 17, 18, 19, 20, 255, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 ]
candyMixVerticals = [
    [23, 9, 22, 21, 11, 15, 13, 16, 17, 4, 10, 3, 19, 7, 18, 1, 5, 6, 20, 12, 2, 0, 14, 8],
    [10, 13, 9, 18, 12, 7, 2, 22, 16, 0, 23, 17, 4, 19, 15, 6, 8, 20, 1, 5, 14, 21, 11, 3],
    [21, 6, 19, 15, 5, 0, 17, 18, 3, 22, 7, 16, 8, 14, 1, 23, 9, 10, 11, 12, 13, 4, 2, 20],
    [22, 8, 15, 7, 1, 14, 2, 16, 3, 12, 21, 4, 19, 20, 10, 5, 18, 11, 17, 0, 6, 9, 23, 13],
    [18, 19, 1, 2, 6, 20, 5, 14, 23, 22, 21, 17, 8, 4, 10, 11, 3, 9, 0, 7, 16, 12, 13, 15],
    [22, 15, 23, 12, 7, 1, 11, 2, 17, 10, 3, 16, 14, 0, 21, 8, 13, 5, 6, 9, 19, 4, 18, 20],
    [11, 18, 21, 8, 20, 23, 17, 3, 2, 22, 7, 10, 0, 4, 1, 19, 13, 9, 12, 5, 16, 6, 15, 14],
    [7, 2, 6, 15, 12, 11, 10, 21, 8, 18, 19, 23, 17, 20, 0, 9, 4, 13, 1, 22, 5, 14, 16, 3],
    [16, 4, 20, 15, 1, 8, 0, 2, 17, 5, 3, 12, 10, 18, 7, 21, 23, 6, 9, 13, 22, 19, 14, 11],
    [12, 4, 22, 2, 10, 14, 6, 20, 3, 16, 1, 9, 18, 0, 15, 5, 11, 13, 19, 17, 23, 7, 8, 21],
    [0, 16, 6, 13, 7, 15, 17, 23, 21, 22, 4, 19, 1, 9, 11, 20, 8, 3, 12, 2, 14, 5, 10, 18],
    [10, 21, 6, 16, 8, 4, 5, 0, 3, 9, 7, 2, 13, 12, 11, 20, 1, 18, 17, 19, 22, 14, 23, 15],
    [19, 6, 17, 13, 8, 1, 4, 21, 2, 11, 7, 9, 5, 16, 14, 10, 0, 12, 20, 23, 3, 22, 15, 18],
    [22, 1, 8, 4, 11, 2, 18, 13, 10, 7, 14, 0, 19, 23, 20, 9, 16, 15, 17, 3, 21, 6, 5, 12],
    [20, 18, 3, 19, 4, 6, 0, 15, 13, 17, 16, 22, 9, 23, 14, 2, 12, 1, 10, 8, 7, 11, 21, 5],
    [15, 13, 9, 12, 1, 16, 3, 0, 23, 21, 17, 6, 19, 8, 22, 11, 14, 5, 20, 2, 18, 10, 4, 7],
    [13, 18, 4, 14, 9, 19, 2, 5, 16, 17, 10, 3, 7, 15, 21, 20, 8, 22, 11, 23, 1, 6, 0, 12],
    [21, 14, 10, 11, 13, 0, 3, 23, 17, 7, 15, 5, 12, 19, 22, 6, 9, 1, 2, 8, 18, 16, 20, 4],
    [17, 22, 0, 20, 8, 12, 15, 13, 10, 2, 9, 14, 11, 4, 5, 18, 19, 16, 23, 1, 21, 6, 7, 3],
    [5, 15, 17, 2, 13, 1, 11, 23, 10, 22, 4, 20, 8, 6, 16, 18, 9, 0, 14, 12, 7, 3, 21, 19],
    [1, 6, 22, 14, 3, 21, 4, 17, 2, 0, 9, 13, 10, 11, 23, 16, 15, 7, 19, 18, 8, 12, 5, 20],
    [21, 7, 6, 17, 9, 11, 14, 16, 2, 10, 5, 8, 22, 19, 15, 23, 4, 20, 18, 12, 1, 13, 0, 3],
    [11, 18, 9, 12, 17, 13, 10, 22, 0, 1, 20, 16, 7, 19, 15, 3, 5, 8, 14, 21, 2, 23, 6, 4],
    [15, 12, 5, 22, 23, 4, 8, 18, 16, 11, 0, 14, 7, 6, 20, 17, 2, 19, 21, 10, 1, 9, 13, 3],
    [16, 22, 2, 14, 11, 8, 7, 1, 17, 4, 13, 23, 12, 5, 21, 10, 9, 15, 0, 6, 3, 19, 20, 18],
    [20, 14, 5, 10, 12, 1, 8, 7, 13, 2, 6, 16, 22, 23, 4, 11, 9, 3, 15, 17, 19, 18, 0, 21],
    [5, 14, 0, 23, 18, 16, 11, 1, 20, 2, 8, 10, 15, 6, 22, 19, 9, 4, 21, 17, 3, 7, 13, 12],
    [13, 7, 17, 18, 14, 0, 22, 21, 10, 12, 3, 5, 8, 23, 6, 20, 15, 4, 9, 19, 1, 16, 2, 11],
    [6, 11, 4, 2, 20, 7, 22, 13, 3, 18, 14, 15, 5, 10, 17, 16, 21, 1, 0, 12, 19, 8, 9, 23],
    [7, 4, 10, 2, 8, 23, 19, 12, 6, 5, 9, 13, 0, 22, 11, 16, 21, 1, 14, 3, 17, 20, 15, 18],
    [14, 22, 21, 16, 10, 4, 17, 15, 13, 12, 9, 0, 20, 11, 5, 7, 2, 19, 3, 18, 23, 8, 1, 6],
    [18, 21, 4, 13, 17, 15, 1, 11, 10, 6, 20, 9, 7, 5, 19, 0, 2, 3, 12, 23, 14, 8, 22, 16]]

shuffler = [26, 1, 5, 20, 15, 2, 21, 25, 27, 3, 13, 31, 20, 27, 27, 11, 18, 27, 26, 11, 0, 23, 3, 26]

candyMixHorizontals = [
    [26, 27, 6, 4, 31, 15, 20, 2, 28, 12, 0, 23, 24, 18, 5, 8, 10, 25, 3, 21, 7, 9, 22, 13, 14, 1, 16, 30, 17, 19, 29, 11],
    [9, 6, 30, 22, 20, 28, 5, 31, 0, 24, 21, 2, 4, 27, 16, 12, 29, 18, 25, 17, 11, 26, 1, 19, 10, 8, 3, 14, 15, 13, 7, 23],
    [6, 8, 19, 7, 16, 23, 20, 12, 28, 21, 1, 5, 14, 3, 13, 29, 9, 11, 10, 31, 27, 26, 4, 30, 18, 17, 15, 24, 22, 25, 0, 2],
    [10, 23, 5, 15, 21, 18, 25, 11, 31, 19, 16, 20, 12, 22, 8, 26, 17, 24, 4, 30, 0, 14, 6, 13, 2, 9, 28, 27, 1, 29, 7, 3],
    [26, 14, 11, 18, 24, 8, 17, 6, 31, 23, 28, 9, 3, 1, 7, 16, 15, 19, 13, 2, 29, 10, 22, 27, 30, 0, 12, 25, 5, 4, 21, 20],
    [30, 16, 3, 0, 6, 24, 18, 14, 22, 26, 29, 27, 8, 10, 1, 31, 25, 13, 12, 7, 15, 23, 5, 20, 17, 19, 11, 21, 2, 4, 28, 9],
    [1, 31, 17, 27, 16, 4, 5, 10, 15, 20, 14, 2, 22, 21, 23, 25, 0, 12, 13, 28, 6, 3, 11, 29, 9, 18, 24, 30, 26, 7, 8, 19],
    [15, 31, 18, 25, 1, 21, 3, 29, 6, 2, 27, 11, 24, 28, 0, 30, 4, 19, 20, 23, 7, 12, 22, 14, 16, 9, 26, 10, 5, 17, 13, 8],
    [19, 2, 17, 9, 31, 11, 4, 30, 29, 13, 0, 25, 15, 23, 26, 1, 21, 20, 6, 22, 27, 16, 7, 24, 10, 18, 28, 14, 8, 5, 3, 12],
    [28, 24, 4, 13, 18, 12, 23, 7, 5, 30, 19, 3, 2, 17, 27, 15, 16, 25, 21, 14, 31, 10, 8, 22, 11, 1, 20, 29, 0, 9, 6, 26],
    [8, 13, 14, 31, 21, 11, 16, 25, 28, 5, 2, 1, 22, 24, 17, 15, 10, 23, 7, 9, 19, 29, 20, 18, 4, 30, 27, 6, 0, 3, 26, 12],
    [24, 27, 29, 31, 21, 30, 18, 12, 13, 0, 9, 26, 2, 6, 19, 23, 16, 11, 28, 5, 1, 14, 7, 15, 10, 4, 25, 20, 3, 22, 17, 8],
    [15, 9, 19, 27, 6, 30, 22, 17, 24, 14, 31, 10, 25, 16, 18, 12, 29, 20, 4, 7, 3, 8, 1, 26, 11, 0, 23, 28, 5, 21, 13, 2],
    [5, 13, 1, 23, 31, 18, 27, 12, 20, 15, 14, 8, 7, 29, 24, 11, 30, 3, 26, 17, 19, 25, 21, 22, 0, 10, 4, 28, 2, 16, 6, 9],
    [29, 27, 15, 12, 30, 0, 4, 9, 14, 7, 22, 19, 5, 31, 8, 18, 6, 11, 23, 24, 2, 17, 3, 26, 21, 16, 1, 10, 20, 25, 13, 28],
    [27, 1, 10, 15, 3, 21, 11, 9, 2, 25, 12, 30, 31, 29, 22, 28, 6, 17, 20, 7, 8, 5, 19, 13, 0, 16, 14, 4, 18, 23, 24, 26],
    [27, 26, 5, 20, 17, 25, 15, 10, 9, 28, 21, 7, 2, 8, 0, 23, 6, 24, 31, 3, 4, 11, 22, 13, 1, 12, 16, 30, 19, 14, 18, 29],
    [6, 14, 27, 13, 29, 22, 11, 19, 18, 4, 21, 16, 30, 17, 8, 26, 0, 25, 12, 7, 28, 3, 10, 20, 9, 24, 2, 23, 5, 15, 1, 31],
    [1, 29, 9, 0, 20, 5, 18, 4, 27, 6, 24, 30, 15, 2, 25, 13, 7, 14, 19, 8, 17, 3, 11, 21, 12, 31, 23, 10, 22, 28, 26, 16],
    [16, 30, 24, 5, 28, 1, 27, 29, 11, 21, 14, 26, 8, 4, 13, 3, 2, 6, 9, 25, 23, 7, 10, 20, 0, 17, 22, 18, 12, 15, 19, 31],
    [0, 28, 15, 30, 31, 3, 24, 16, 23, 17, 1, 11, 4, 2, 7, 13, 19, 12, 25, 27, 20, 10, 18, 8, 14, 6, 21, 29, 26, 22, 5, 9],
    [24, 0, 19, 15, 22, 11, 14, 28, 12, 8, 25, 17, 26, 23, 3, 31, 18, 13, 5, 7, 30, 4, 27, 1, 16, 2, 21, 10, 9, 20, 29, 6],
    [14, 25, 1, 15, 28, 26, 27, 10, 13, 22, 19, 9, 3, 18, 23, 2, 21, 0, 6, 16, 4, 12, 8, 24, 29, 17, 11, 30, 20, 31, 5, 7],
    [16, 12, 31, 17, 13, 28, 9, 4, 1, 10, 27, 30, 5, 26, 21, 6, 15, 7, 24, 11, 8, 14, 29, 22, 19, 20, 0, 3, 2, 25, 18, 23],
    [18, 19, 30, 15, 29, 11, 16, 26, 1, 25, 8, 9, 31, 3, 13, 20, 6, 23, 4, 28, 12, 10, 21, 5, 17, 14, 24, 22, 2, 27, 0, 7],
    [26, 15, 13, 22, 21, 0, 16, 17, 28, 8, 29, 20, 4, 14, 27, 3, 19, 24, 23, 30, 9, 5, 25, 10, 6, 31, 18, 11, 2, 7, 1, 12],
    [10, 4, 11, 25, 1, 12, 14, 21, 16, 26, 31, 27, 20, 5, 24, 17, 19, 0, 28, 15, 7, 8, 29, 23, 3, 2, 22, 30, 9, 18, 13, 6],
    [13, 12, 29, 0, 1, 28, 30, 20, 5, 27, 8, 7, 19, 18, 16, 17, 10, 2, 15, 22, 21, 31, 4, 6, 23, 9, 11, 14, 24, 3, 26, 25],
    [21, 23, 19, 28, 1, 10, 6, 17, 9, 16, 13, 8, 3, 29, 26, 2, 7, 0, 27, 22, 15, 5, 14, 12, 20, 25, 18, 24, 4, 31, 30, 11],
    [26, 15, 18, 21, 0, 22, 6, 11, 24, 29, 14, 2, 31, 23, 1, 30, 25, 3, 5, 12, 13, 17, 19, 28, 4, 7, 16, 9, 8, 27, 10, 20],
    [14, 25, 27, 8, 24, 17, 2, 11, 1, 12, 19, 16, 0, 30, 29, 6, 22, 3, 21, 15, 13, 18, 20, 28, 7, 31, 26, 5, 9, 4, 23, 10],
    [12, 10, 11, 20, 19, 8, 18, 6, 0, 28, 29, 26, 15, 23, 27, 31, 1, 5, 30, 13, 25, 16, 7, 2, 4, 17, 14, 22, 24, 9, 21, 3]]


def strToArr(strIn:str) -> list:
    if not (len(strIn) == 29 and strIn[5] == '-' and strIn[11] == '-' and strIn[17] == '-' and strIn[23] == '-'):
        return None
    arr = []
    for c in strIn:
        if c == '-':
            continue
        if not c in '23456789ABCDEFGHJKLMNPQRSTUVWXYZ':
            return None
        arr.append(candyMap[ord(c) & 255])
    return arr

def ComputeShuffle(arr) -> int:
    num = 0
    for i in range(24):
        num += arr[i] + shuffler[i]
    num = num % 32
    return num

def UnshuffleArray(arr):
    b = ComputeShuffle(arr)
    b2 = arr[24]
    if b >= 32 or b2 >= 32:
        return None
    array = [0 for _ in range(24)]
    for i in range(24):
        array[i] = candyMixHorizontals[b2][arr[i]]
    for j in range(24):
        arr[candyMixVerticals[b][j]] = array[j]
    return arr

def arrToBin(arr):
    bin = [0 for _ in range(16)]
    num2 = arr[0] << 35 | arr[1] << 30 | arr[2] << 25 | arr[3] << 20 | arr[4] << 15 | arr[5] << 10 | arr[6] << 5 | arr[7]
    bin[0] = num2 >> 32 & 255
    bin[1] = num2 >> 24 & 255
    bin[2] = num2 >> 16 & 255
    bin[3] = num2 >> 8 & 255
    bin[4] = num2 & 255
    num2 = arr[8] << 35 | arr[9] << 30 | arr[10] << 25 | arr[11] << 20 | arr[12] << 15 | arr[13] << 10 | arr[14] << 5 | arr[15]
    bin[5] = num2 >> 32 & 255
    bin[6] = num2 >> 24 & 255
    bin[7] = num2 >> 16 & 255
    bin[8] = num2 >> 8 & 255
    bin[9] = num2 & 255
    num2 = arr[16] << 35 | arr[17] << 30 | arr[18] << 25 | arr[19] << 20 | arr[20] << 15 | arr[21] << 10 | arr[22] << 5 | arr[23]
    bin[10] = num2 >> 32 & 255
    bin[11] = num2 >> 24 & 255
    bin[12] = num2 >> 16 & 255
    bin[13] = num2 >> 8 & 255
    bin[14] = num2 & 255
    bin[15] = arr[24] << 3
    return bin

hiddenFlag = False
licence = None #'3TETY-Y9MM6-RXTAT-JJ5ND-YSBW6' if hiddenFlag else '6RPRR-KRAGH-FKEPW-TSZ3A-CKG42'

guessNum = 0

while licence is None:
    guessNum+=1
    valideChars = '23456789ABCDEFGHJKLMNPQRSTUVWXYZ'
    guess = '-'.join([''.join([choice(valideChars) for _ in range(5)]) for _ in range(5)])    # 
    arr = strToArr(guess)
    if arr is None:
        continue
    unshuffeled = UnshuffleArray(arr)
    if unshuffeled is None:
        continue
    bin = arrToBin(unshuffeled)

    Expiration = int.from_bytes(bin[0:4], 'little')
    Generation = int.from_bytes(bin[4:8], 'little')
    Product = bin[8]
    Flags = bin[9]
    Count = int.from_bytes(bin[10:11], 'little')
    Random = int.from_bytes(bin[12:13], 'little')
    Type = bin[14]
    Shuffle = bin[15]

    valide = Expiration > 1621805003 and Generation > 1621805003 and Product == 1 and Type == (2 if hiddenFlag else 1)

    print(f'{guess}: {Expiration= : >10}, {Generation= : >10}, {Product= : >3}, {Type= : >3}, {valide=}, {guessNum= :}')

    if valide:
        licence = guess
        break

print('''
Valide Licence key found.
Retreiving flag...
''')

print({"LicenseKey":licence})

URL = 'https://xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.idocker.vuln.land'
response = requests.post(URL+'/license', json={"LicenseKey":licence}).json()
for k in response:
    print(f'{k}: {response[k]}')